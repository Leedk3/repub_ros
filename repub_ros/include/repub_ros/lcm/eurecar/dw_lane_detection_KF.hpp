/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __eurecar_dw_lane_detection_KF_hpp__
#define __eurecar_dw_lane_detection_KF_hpp__

#include <lcm/lcm_coretypes.h>

#include <vector>

namespace eurecar
{

/**
 * 
 * using driveworks, lane detection with Kalman filter lcm definition
 *
 */
class dw_lane_detection_KF
{
    public:
        int64_t    timestamp;

        int32_t    num_of_lanes;

        std::vector< int32_t > lane_pos;

        ///  -2:left-left -1: ego-left 1:ego-right 2:right-right 0:unknown 
        std::vector< int32_t > lane_type;

        ///  1:solid 2:dashed 3:road-boundary 0:unknown 
        std::vector< double > max_y;

        std::vector< double > min_y;

        std::vector< double > coef_3;

        std::vector< double > coef_2;

        std::vector< double > coef_1;

        std::vector< double > coef_0;

        std::vector< int32_t > confidence;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "dw_lane_detection_KF"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int dw_lane_detection_KF::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int dw_lane_detection_KF::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int dw_lane_detection_KF::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t dw_lane_detection_KF::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* dw_lane_detection_KF::getTypeName()
{
    return "dw_lane_detection_KF";
}

int dw_lane_detection_KF::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->timestamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_of_lanes, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_of_lanes > 0) {
        tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->lane_pos[0], this->num_of_lanes);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_of_lanes > 0) {
        tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->lane_type[0], this->num_of_lanes);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_of_lanes > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->max_y[0], this->num_of_lanes);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_of_lanes > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->min_y[0], this->num_of_lanes);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_of_lanes > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->coef_3[0], this->num_of_lanes);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_of_lanes > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->coef_2[0], this->num_of_lanes);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_of_lanes > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->coef_1[0], this->num_of_lanes);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_of_lanes > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->coef_0[0], this->num_of_lanes);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_of_lanes > 0) {
        tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->confidence[0], this->num_of_lanes);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int dw_lane_detection_KF::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->timestamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_of_lanes, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_of_lanes) {
        this->lane_pos.resize(this->num_of_lanes);
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->lane_pos[0], this->num_of_lanes);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_of_lanes) {
        this->lane_type.resize(this->num_of_lanes);
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->lane_type[0], this->num_of_lanes);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_of_lanes) {
        this->max_y.resize(this->num_of_lanes);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->max_y[0], this->num_of_lanes);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_of_lanes) {
        this->min_y.resize(this->num_of_lanes);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->min_y[0], this->num_of_lanes);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_of_lanes) {
        this->coef_3.resize(this->num_of_lanes);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->coef_3[0], this->num_of_lanes);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_of_lanes) {
        this->coef_2.resize(this->num_of_lanes);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->coef_2[0], this->num_of_lanes);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_of_lanes) {
        this->coef_1.resize(this->num_of_lanes);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->coef_1[0], this->num_of_lanes);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_of_lanes) {
        this->coef_0.resize(this->num_of_lanes);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->coef_0[0], this->num_of_lanes);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_of_lanes) {
        this->confidence.resize(this->num_of_lanes);
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->confidence[0], this->num_of_lanes);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int dw_lane_detection_KF::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, this->num_of_lanes);
    enc_size += __int32_t_encoded_array_size(NULL, this->num_of_lanes);
    enc_size += __double_encoded_array_size(NULL, this->num_of_lanes);
    enc_size += __double_encoded_array_size(NULL, this->num_of_lanes);
    enc_size += __double_encoded_array_size(NULL, this->num_of_lanes);
    enc_size += __double_encoded_array_size(NULL, this->num_of_lanes);
    enc_size += __double_encoded_array_size(NULL, this->num_of_lanes);
    enc_size += __double_encoded_array_size(NULL, this->num_of_lanes);
    enc_size += __int32_t_encoded_array_size(NULL, this->num_of_lanes);
    return enc_size;
}

uint64_t dw_lane_detection_KF::_computeHash(const __lcm_hash_ptr *)
{
    uint64_t hash = 0x24c70978969d8212LL;
    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
